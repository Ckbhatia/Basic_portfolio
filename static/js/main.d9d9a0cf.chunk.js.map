{"version":3,"sources":["components/Header.jsx","components/Footer.jsx","components/LandingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","Div","className","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","styled","div","Footer","FooterElement","footer","LandingPage","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"imCAIe,SAASA,IACtB,OACE,kBAACC,EAAD,CAAKC,UAAU,yBACb,kBAACC,EAAA,EAAD,CAAQC,GAAG,cAAcC,OAAO,MAC9B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAEjB,wBAAIL,UAAU,4BAAd,YACW,0BAAMA,UAAU,yBAAhB,eAGb,kBAACC,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKV,UAAU,WACb,kBAACU,EAAA,EAAIC,KAAL,CAAUN,KAAK,WAAf,UACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,aAAf,YACA,kBAACK,EAAA,EAAIC,KAAL,CAAUN,KAAK,YAAf,eAQZ,IAAMN,EAAMa,IAAOC,IAAV,K,kQCxBM,SAASC,IACtB,OACE,kBAACC,EAAD,CAAef,UAAU,yBACvB,yBAAKA,UAAU,oBACb,0BAAMA,UAAU,eAAhB,+BAMR,IAAMe,EAAgBH,IAAOI,OAAV,KCTJ,SAASC,IACtB,OACE,yBAAKjB,UAAU,0BACb,kBAACF,EAAD,MACA,kBAACgB,EAAD,O,MCISI,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAACiB,EAAD,QCKcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d9d9a0cf.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nexport default function Header() {\n  return (\n    <Div className=\"navbar-main-container\">\n      <Navbar bg=\"transparent\" expand=\"lg\">\n        <Navbar.Brand href=\"/\">\n          {/* TODO: Add owner name dynamically */}\n          <h1 className=\"navbar-main-heading-text\">\n            chetan's <span className=\"header-portfolio-text\">portfolio</span>\n          </h1>\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#skills\">Skills</Nav.Link>\n            <Nav.Link href=\"#projects\">Projects</Nav.Link>\n            <Nav.Link href=\"#contact\">Contact</Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    </Div>\n  );\n}\n\nconst Div = styled.div`\n  margin: 0 2rem;\n  .navbar-main-heading-text {\n    font-family: \"Roboto\", sans-serif;\n    font-size: 1.4rem;\n    letter-spacing: 0.01rem;\n    font-weight: 700;\n    .header-portfolio-text {\n      color: #c4a627;\n    }\n  }\n\n  .navbar-toggler {\n    background-color: #fafafc;\n    border-color: transparent;\n    border-radius: 5px;\n  }\n\n  .nav-link {\n    font-family: \"Roboto\", sans-serif;\n    font-size: 0.9rem;\n    font-weight: 700;\n    text-transform: uppercase;\n  }\n\n  .btn-outline-success {\n    color: #3b3e4d;\n    border: none;\n    outline: 0;\n    &:hover {\n      color: darkgrey;\n      background-color: transparent;\n    }\n    &:focus {\n      background-color: transparent;\n      // RESET\n      box-shadow: 0 0 0;\n    }\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport default function Footer() {\n  return (\n    <FooterElement className=\"footer-main-container\">\n      <div className=\"footer-container\">\n        <span className=\"footer-text\">2020 @ chetan's portfolio</span>\n      </div>\n    </FooterElement>\n  );\n}\n\nconst FooterElement = styled.footer`\n  background-color: #f2f2f2;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-height: 6rem;\n  .footer-text {\n    font-size: 1rem;\n    color: #a6adc9;\n  }\n`;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\nexport default function LandingPage() {\n  return (\n    <div className=\"landing-page-container\">\n      <Header />\n      <Footer />\n    </div>\n  );\n}\n","import React from \"react\";\nimport LandingPage from \"./components/LandingPage\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LandingPage />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}